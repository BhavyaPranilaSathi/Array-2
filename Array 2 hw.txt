Array-2

Problem1 


Time Complexity : O(N)
Space Complexity : O(1)


class Solution:
    def findDisappearedNumbers(self, nums: List[int]) -> List[int]:
        if nums == None or len(nums) == 0:
            return []
        result = []
        for i in range(len(nums)):
            index = abs(nums[i]) - 1
            if nums[index] > 0:
                nums[index] = nums[index] * -1

        for j in range(len(nums)):
            if nums[j] > 0:
                result.append(j + 1)
        
        return result



Problem2

Given an array of numbers of length N, find both the minimum and maximum. Follow up : Can you do it using less than 2 * (N - 2) comparison

Time Complexity: O(n)
Space Complexity: O(1)

def find_min_max2(arr):  
  Min = float('inf')
  Max = float('-inf')
  i = 0
  while i < len(arr)-1:
    if arr[i]>=arr[i+1]:
      Max = max(arr[i],Max)
      Min = min(arr[i+1], Min)
    else:
      Max = max(arr[i+1],Max)
      Min = min(arr[i],Min)
    i += 1
  return Min, Max






Problem3 

TC O(m*n) 
SC O(1)


class Solution:
    def gameOfLife(self, board: List[List[int]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        if board == None or len(board) == 0:
            return
        m = len(board) #row
        n = len(board[0]) #col
        for i in range(m):
            for j in range(n):
                liveNeighbors = self.liveNeighborCount(board, i, j)
                if board[i][j] == 1:
                    if liveNeighbors < 2 or liveNeighbors > 3:
                        board[i][j] = 2 #live to dead  1->0 = 2
                elif board[i][j] == 0:
                    if liveNeighbors == 3:
                        board[i][j] = 3 # dead to alive 0->1 = 3  
        for i in range(m):
            for j in range(n):
                if board[i][j] == 2:
                    board[i][j] = 0
                elif board[i][j] == 3:
                    board[i][j] = 1

    def liveNeighborCount(self, board: List[List[int]], row: int, col: int) -> int:
        count = 0
        m = len(board) #row
        n = len(board[0]) #col
        dirs = [[-1,0],[1,0],[0,-1],[0,1],[-1,-1],[-1,1],[1,-1],[1,1]]
        #U, D, L, R, UL, UR, LL, LR
        for Dir in dirs:
            nr = row + Dir[0]
            nc = col + Dir[1]
            if nr >= 0 and nr < m and nc >=0 and nc < n and (board[nr][nc] ==1 or board[nr][nc] == 2):
                count = count+1
        print(count)
        return count